// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/baxiang/go-miro-practice/internal/app/reviews"
	"github.com/baxiang/go-miro-practice/internal/app/reviews/controllers"
	"github.com/baxiang/go-miro-practice/internal/app/reviews/grpcservers"
	"github.com/baxiang/go-miro-practice/internal/app/reviews/repositories"
	"github.com/baxiang/go-miro-practice/internal/app/reviews/services"
	"github.com/baxiang/go-miro-practice/internal/pkg/app"
	"github.com/baxiang/go-miro-practice/internal/pkg/config"
	"github.com/baxiang/go-miro-practice/internal/pkg/consul"
	"github.com/baxiang/go-miro-practice/internal/pkg/database"
	"github.com/baxiang/go-miro-practice/internal/pkg/jaeger"
	"github.com/baxiang/go-miro-practice/internal/pkg/log"
	"github.com/baxiang/go-miro-practice/internal/pkg/transports/grpc"
	"github.com/baxiang/go-miro-practice/internal/pkg/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.NewConfig(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.NewLogger(options)
	if err != nil {
		return nil, err
	}
	reviewsOptions, err := reviews.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.NewDatabase(databaseOptions)
	if err != nil {
		return nil, err
	}
	reviewsRepository := repositories.NewMysqlReviewsRepository(logger, db)
	reviewsService := services.NewReviewService(logger, reviewsRepository)
	reviewsController := controllers.NewReviewsController(logger, reviewsService)
	initControllers := controllers.CreateInitControllersFn(reviewsController)
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.NewJaeger(configuration)
	if err != nil {
		return nil, err
	}
	engine := http.NewRouter(httpOptions, logger, initControllers, tracer)
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	client, err := consul.NewConsul(consulOptions)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine, client)
	if err != nil {
		return nil, err
	}
	serverOptions, err := grpc.NewServerOptions(viper)
	if err != nil {
		return nil, err
	}
	reviewsServer, err := grpcservers.NewReviewsServer(logger, reviewsService)
	if err != nil {
		return nil, err
	}
	initServers := grpcservers.CreateInitServersFn(reviewsServer)
	grpcServer, err := grpc.NewGrpcServer(serverOptions, logger, initServers, client, tracer)
	if err != nil {
		return nil, err
	}
	application, err := reviews.NewApp(reviewsOptions, logger, server, grpcServer)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, log.ProviderSet, database.ProviderSet, services.ProviderSet, consul.ProviderSet, jaeger.ProviderSet, http.ProviderSet, grpc.ProviderSet, reviews.ProviderSet, repositories.ProviderSet, controllers.ProviderSet, grpcservers.ProviderSet)
